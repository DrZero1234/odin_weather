(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>c});var a=t(537),i=t.n(a),o=t(645),r=t.n(o)()(i());r.push([n.id,"html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.navbar {\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #991B1B;\n    color: #FAFAFA;\n}\n\n.page-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#icon-img {\n    min-width: 48px;\n    max-width: 96px;\n    min-height: 48px;\n    max-height: 96px;\n}\n\n.nav-search {\n    display: flex;\n    align-items: center;\n}\n\n.nav-search input,\n.nav-search img {\n    height: 24px;\n}\n\n.nav-search input {\n    padding: 3px;\n}\n\n.nav-search button {\n    background-color: black;\n    border: none;\n        cursor: pointer;\n    padding: 3px;\n}\n\n.nav-search img {\n    width: 24px;\n}\n\n\n.content {\n    width: 100%;\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n}\n\n.title {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n}\n\n.title #city-name {\n    font-size: 2.1em;\n    font-weight: 900;\n}\n\n.title #today {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.weather-forecast {\n    display: flex;\n    flex: 1;\n    gap: 36px;\n    flex-wrap: wrap;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    min-width: 400px;\n    max-width: fit-content;\n    height: fit-content;\n    border: 5px solid red;\n}\n\n.main, .details {\n    padding: 6px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast .main {\n    border: 2px solid green;\n    font-size: 24px;\n    background-color: #F8FAFC;\n}\n\n.main button {\n    width: 100px;\n}\n\n.forecast .main img {\n    min-height: 100px;\n    min-width: 100px;\n    max-height: 150px;\n    max-width: 150px;\n}\n\n.forecast .details{\n    border:  1px solid grey;\n    font-size: 16px;\n    background-color: #D1D5DB;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,aAAa;IACb,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,YAAY;QACR,eAAe;IACnB,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;;AAGA;IACI,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,OAAO;IACP,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,yBAAyB;AAC7B",sourcesContent:["html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.navbar {\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #991B1B;\n    color: #FAFAFA;\n}\n\n.page-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#icon-img {\n    min-width: 48px;\n    max-width: 96px;\n    min-height: 48px;\n    max-height: 96px;\n}\n\n.nav-search {\n    display: flex;\n    align-items: center;\n}\n\n.nav-search input,\n.nav-search img {\n    height: 24px;\n}\n\n.nav-search input {\n    padding: 3px;\n}\n\n.nav-search button {\n    background-color: black;\n    border: none;\n        cursor: pointer;\n    padding: 3px;\n}\n\n.nav-search img {\n    width: 24px;\n}\n\n\n.content {\n    width: 100%;\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n}\n\n.title {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n}\n\n.title #city-name {\n    font-size: 2.1em;\n    font-weight: 900;\n}\n\n.title #today {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.weather-forecast {\n    display: flex;\n    flex: 1;\n    gap: 36px;\n    flex-wrap: wrap;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    min-width: 400px;\n    max-width: fit-content;\n    height: fit-content;\n    border: 5px solid red;\n}\n\n.main, .details {\n    padding: 6px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast .main {\n    border: 2px solid green;\n    font-size: 24px;\n    background-color: #F8FAFC;\n}\n\n.main button {\n    width: 100px;\n}\n\n.forecast .main img {\n    min-height: 100px;\n    min-width: 100px;\n    max-height: 150px;\n    max-width: 150px;\n}\n\n.forecast .details{\n    border:  1px solid grey;\n    font-size: 16px;\n    background-color: #D1D5DB;\n}\n"],sourceRoot:""}]);const c=r},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(a)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(r[s]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);a&&r[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(i," */"),r=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(r).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var o={},r=[],c=0;c<n.length;c++){var s=n[c],A=a.base?s[0]+a.base:s[0],d=o[A]||0,l="".concat(A," ").concat(d);o[A]=d+1;var p=t(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var u=i(m,a);a.byIndex=c,e.splice(c,0,{identifier:l,updater:u,references:1})}r.push(l)}return r}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=a(n=n||[],i=i||{});return function(n){n=n||[];for(var r=0;r<o.length;r++){var c=t(o[r]);e[c].references--}for(var s=a(n,i),A=0;A<o.length;A++){var d=t(o[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(a){var i=e[a];if(void 0!==i)return i.exports;var o=e[a]={id:a,exports:{}};return n[a](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),a=t(795),i=t.n(a),o=t(569),r=t.n(o),c=t(565),s=t.n(c),A=t(216),d=t.n(A),l=t(589),p=t.n(l),m=t(402),u={};u.styleTagTransform=p(),u.setAttributes=s(),u.insert=r().bind(null,"head"),u.domAPI=i(),u.insertStyleElement=d(),e()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals,document.getElementById("icon-test");const f=document.getElementById("city-name"),h=document.getElementById("today"),g=document.querySelector(".weather-forecast"),B=(n,e)=>{fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=${e}&units=metric`).then((function(n){if(n.ok)return n.json();throw new Error("Invalid city or connection error")})).then((function(n){const e=[];console.log(n);const t=n.city.name;f.textContent=t;for(let t=0;t<n.list.length;t+=8){const a={main:{}};console.log(n.list[t]);const i=n.list[t].dt_txt.slice(0,10).split("-"),o=new Date(i[0],i[1]-1,i[2]),r=o.toLocaleString("en-us",{month:"short",year:"numeric",day:"numeric"});0===t&&(h.textContent=r);const c=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][o.getDay()];a.main.date={Date:r,day_str:c},console.log(c);const s=Math.round(n.list[t].main.temp);a.main.temperature=s;const A=n.list[t].weather[0].description;a.main.description=A;const d=" http://openweathermap.org/img/wn/"+n.list[t].weather[0].icon+".png";a.main.logo=d,a.details={},a.details.clouds=n.list[t].clouds.all,a.details.humidity=n.list[t].main.humidity,a.details.wind_speed=n.list[t].wind.speed,e.push(a)}return e})).then((function(n){console.log(n);for(let e=0;e<n.length;e++){const t=document.createElement("div");t.className="forecast";const a=document.createElement("div");a.className="main";const i=document.createElement("h2");i.id="forecast-day",i.textContent=0===e?"Today":n[e].main.date.day_str;const o=document.createElement("img");o.id="forecast-image",o.src=n[e].main.logo;const r=document.createElement("h3");r.id="forecast-temperature",r.textContent=`Temperature: ${n[e].main.temperature} C°`;const c=document.createElement("p");c.id="forecast-description",c.textContent=`Description: ${n[e].main.description}`;const s=document.createElement("div");s.className="details";const A=document.createElement("p");A.id="forecast-date",A.textContent=`Date: ${n[e].main.date.Date}`;const d=document.createElement("p");d.id="forecast-humidity",d.textContent=`Humidity: ${n[e].details.humidity} %`;const l=document.createElement("p");l.id="forecast-wind",l.textContent=`Wind speed: ${n[e].details.wind_speed} m/s`;const p=document.createElement("p");p.id="cloudiness",p.textContent=`Cloudiness: ${n[e].details.clouds} %`,a.appendChild(i),a.appendChild(o),a.appendChild(r),a.appendChild(c),s.appendChild(A),s.appendChild(d),s.appendChild(l),s.appendChild(p),t.appendChild(a),t.appendChild(s),g.appendChild(t)}}))},x=document.getElementById("search-text"),C=document.getElementById("search-btn");x.addEventListener("keypress",(()=>{"Enter"===event.key&&B(x.value,"58870e7945eeb6b9b2d5e086112bce8c")})),C.addEventListener("click",(()=>{B(x.value,"58870e7945eeb6b9b2d5e086112bce8c")})),B((()=>{const n=["New York","London","Berlin","Amsterdam","Marrakesh","Paris","Venezia","Warsaw"];return n[Math.floor(Math.random()*n.length)]})(),"58870e7945eeb6b9b2d5e086112bce8c")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFRQyxXQUVoRVEsRUFBUzVGLFlBQVk2RixHQUNyQkQsRUFBUzVGLFlBQVk4RixHQUNyQkYsRUFBUzVGLFlBQVlnRyxHQUNyQkosRUFBUzVGLFlBQVlpRyxHQUVyQkMsRUFBWWxHLFlBQVltRyxHQUN4QkQsRUFBWWxHLFlBQVlzRixHQUN4QlksRUFBWWxHLFlBQVl1RixHQUN4QlcsRUFBWWxHLFlBQVlvRyxHQUV4QlYsRUFBYTFGLFlBQVk0RixHQUN6QkYsRUFBYTFGLFlBQVlrRyxHQUN6QnZELEVBQXNCM0MsWUFBWTBGLEVBQ3BDLENBQ0YsR0FBRSxFRXhKQVcsRUFBYTlHLFNBQVNpRCxlQUFlLGVBQ3JDOEQsRUFBYy9HLFNBQVNpRCxlQUFlLGNBSTVDNkQsRUFBV0UsaUJBQWlCLFlBQVksS0FDcEIsVUFBZEMsTUFBTTNFLEtBQ1JlLEVBQVN5RCxFQUFXSSxNRlRFLG1DRVV4QixJQUdGSCxFQUFZQyxpQkFBaUIsU0FBUyxLQUNwQzNELEVBQVN5RCxFQUFXSSxNRmRJLG1DRWNpQixJQUczQzdELEVETndCLE1BQ3RCLE1BQU04RCxFQUFTLENBQ2IsV0FDQSxTQUNBLFNBQ0EsWUFDQSxZQUNBLFFBQ0EsVUFDQSxVQUVGLE9BQU9BLEVBQU9oQyxLQUFLaUMsTUFBTWpDLEtBQUtrQyxTQUFXRixFQUFPL0ssUUFBUSxFQ0xqRGtMLEdGakJpQixtQyIsInNvdXJjZXMiOlsid2VicGFjazovL29kaW5fd2VhdGhlci8uL3NyYy9jc3Mvc3R5bGUuY3NzIiwid2VicGFjazovL29kaW5fd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL29kaW5fd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL29kaW5fd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9vZGluX3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9vZGluX3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9vZGluX3dlYXRoZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL29kaW5fd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9vZGluX3dlYXRoZXIvLi9zcmMvY3NzL3N0eWxlLmNzcz85ZmNkIiwid2VicGFjazovL29kaW5fd2VhdGhlci8uL3NyYy9qcy9BUElfZnVuY3Rpb25zLmpzIiwid2VicGFjazovL29kaW5fd2VhdGhlci8uL3NyYy9qcy9PdGhlcl9mdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vb2Rpbl93ZWF0aGVyLy4vc3JjL2pzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLm5hdmJhciB7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk5MUIxQjtcXG4gICAgY29sb3I6ICNGQUZBRkE7XFxufVxcblxcbi5wYWdlLWljb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jaWNvbi1pbWcge1xcbiAgICBtaW4td2lkdGg6IDQ4cHg7XFxuICAgIG1heC13aWR0aDogOTZweDtcXG4gICAgbWluLWhlaWdodDogNDhweDtcXG4gICAgbWF4LWhlaWdodDogOTZweDtcXG59XFxuXFxuLm5hdi1zZWFyY2gge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubmF2LXNlYXJjaCBpbnB1dCxcXG4ubmF2LXNlYXJjaCBpbWcge1xcbiAgICBoZWlnaHQ6IDI0cHg7XFxufVxcblxcbi5uYXYtc2VhcmNoIGlucHV0IHtcXG4gICAgcGFkZGluZzogM3B4O1xcbn1cXG5cXG4ubmF2LXNlYXJjaCBidXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBwYWRkaW5nOiAzcHg7XFxufVxcblxcbi5uYXYtc2VhcmNoIGltZyB7XFxuICAgIHdpZHRoOiAyNHB4O1xcbn1cXG5cXG5cXG4uY29udGVudCB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZm9udC1zaXplOiAyLjJyZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxufVxcblxcbi50aXRsZSAjY2l0eS1uYW1lIHtcXG4gICAgZm9udC1zaXplOiAyLjFlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG59XFxuXFxuLnRpdGxlICN0b2RheSB7XFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi53ZWF0aGVyLWZvcmVjYXN0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMTtcXG4gICAgZ2FwOiAzNnB4O1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5mb3JlY2FzdCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG1pbi13aWR0aDogNDAwcHg7XFxuICAgIG1heC13aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIHJlZDtcXG59XFxuXFxuLm1haW4sIC5kZXRhaWxzIHtcXG4gICAgcGFkZGluZzogNnB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZm9yZWNhc3QgLm1haW4ge1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhGQUZDO1xcbn1cXG5cXG4ubWFpbiBidXR0b24ge1xcbiAgICB3aWR0aDogMTAwcHg7XFxufVxcblxcbi5mb3JlY2FzdCAubWFpbiBpbWcge1xcbiAgICBtaW4taGVpZ2h0OiAxMDBweDtcXG4gICAgbWluLXdpZHRoOiAxMDBweDtcXG4gICAgbWF4LWhlaWdodDogMTUwcHg7XFxuICAgIG1heC13aWR0aDogMTUwcHg7XFxufVxcblxcbi5mb3JlY2FzdCAuZGV0YWlsc3tcXG4gICAgYm9yZGVyOiAgMXB4IHNvbGlkIGdyZXk7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0QxRDVEQjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxVQUFVO0lBQ1YsU0FBUztJQUNULHNCQUFzQjtBQUMxQjs7QUFFQTs7SUFFSSxhQUFhO0lBQ2IsOEJBQThCO0lBQzlCLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7QUFDdkI7O0FBRUE7O0lBRUksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsWUFBWTtRQUNSLGVBQWU7SUFDbkIsWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7O0FBR0E7SUFDSSxXQUFXO0lBQ1gsZ0JBQWdCO0lBQ2hCLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixzQkFBc0I7SUFDdEIsaUJBQWlCO0lBQ2pCLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLE9BQU87SUFDUCxTQUFTO0lBQ1QsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLHNCQUFzQjtJQUN0QixtQkFBbUI7SUFDbkIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZix5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixpQkFBaUI7SUFDakIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZix5QkFBeUI7QUFDN0JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCB7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLm5hdmJhciB7XFxuXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMTBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzk5MUIxQjtcXG4gICAgY29sb3I6ICNGQUZBRkE7XFxufVxcblxcbi5wYWdlLWljb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4jaWNvbi1pbWcge1xcbiAgICBtaW4td2lkdGg6IDQ4cHg7XFxuICAgIG1heC13aWR0aDogOTZweDtcXG4gICAgbWluLWhlaWdodDogNDhweDtcXG4gICAgbWF4LWhlaWdodDogOTZweDtcXG59XFxuXFxuLm5hdi1zZWFyY2gge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubmF2LXNlYXJjaCBpbnB1dCxcXG4ubmF2LXNlYXJjaCBpbWcge1xcbiAgICBoZWlnaHQ6IDI0cHg7XFxufVxcblxcbi5uYXYtc2VhcmNoIGlucHV0IHtcXG4gICAgcGFkZGluZzogM3B4O1xcbn1cXG5cXG4ubmF2LXNlYXJjaCBidXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBwYWRkaW5nOiAzcHg7XFxufVxcblxcbi5uYXYtc2VhcmNoIGltZyB7XFxuICAgIHdpZHRoOiAyNHB4O1xcbn1cXG5cXG5cXG4uY29udGVudCB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZm9udC1zaXplOiAyLjJyZW07XFxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XFxufVxcblxcbi50aXRsZSAjY2l0eS1uYW1lIHtcXG4gICAgZm9udC1zaXplOiAyLjFlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDkwMDtcXG59XFxuXFxuLnRpdGxlICN0b2RheSB7XFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcblxcbi53ZWF0aGVyLWZvcmVjYXN0IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleDogMTtcXG4gICAgZ2FwOiAzNnB4O1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxufVxcblxcbi5mb3JlY2FzdCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIG1pbi13aWR0aDogNDAwcHg7XFxuICAgIG1heC13aWR0aDogZml0LWNvbnRlbnQ7XFxuICAgIGhlaWdodDogZml0LWNvbnRlbnQ7XFxuICAgIGJvcmRlcjogNXB4IHNvbGlkIHJlZDtcXG59XFxuXFxuLm1haW4sIC5kZXRhaWxzIHtcXG4gICAgcGFkZGluZzogNnB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZm9yZWNhc3QgLm1haW4ge1xcbiAgICBib3JkZXI6IDJweCBzb2xpZCBncmVlbjtcXG4gICAgZm9udC1zaXplOiAyNHB4O1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhGQUZDO1xcbn1cXG5cXG4ubWFpbiBidXR0b24ge1xcbiAgICB3aWR0aDogMTAwcHg7XFxufVxcblxcbi5mb3JlY2FzdCAubWFpbiBpbWcge1xcbiAgICBtaW4taGVpZ2h0OiAxMDBweDtcXG4gICAgbWluLXdpZHRoOiAxMDBweDtcXG4gICAgbWF4LWhlaWdodDogMTUwcHg7XFxuICAgIG1heC13aWR0aDogMTUwcHg7XFxufVxcblxcbi5mb3JlY2FzdCAuZGV0YWlsc3tcXG4gICAgYm9yZGVyOiAgMXB4IHNvbGlkIGdyZXk7XFxuICAgIGZvbnQtc2l6ZTogMTZweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0QxRDVEQjtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBnZXRfZGF5X25hbWUgfSBmcm9tIFwiLi9PdGhlcl9mdW5jdGlvbnNcIjtcblxuY29uc3QgZ2V0X2FwaV9rZXkgPSAoKSA9PiBcIjU4ODcwZTc5NDVlZWI2YjliMmQ1ZTA4NjExMmJjZThjXCI7XG5cbmNvbnN0IElDT05fVEVTVCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWNvbi10ZXN0XCIpO1xuY29uc3QgQ0lUWV9OQU1FX0hUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNpdHktbmFtZVwiKTtcbmNvbnN0IFRPREFZX0hUTUwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZGF5XCIpO1xuXG5jb25zdCBXRUFUSEVSX0ZPUkVDQVNUX0hUTUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICBcIi53ZWF0aGVyLWZvcmVjYXN0XCJcbik7XG5cbi8vIEhvdXJseVxuXG4vL2h0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPSR7Y2l0eV9uYW1lfSZhcHBpZD0ke2tleX1cblxuY29uc3QgdGVzdF9hcGkgPSAoY2l0eV9uYW1lLCBrZXkpID0+IHtcbiAgZmV0Y2goXG4gICAgYGh0dHBzOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPSR7Y2l0eV9uYW1lfSZhcHBpZD0ke2tleX0mdW5pdHM9bWV0cmljYFxuICApXG4gICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLm9rKSB7XG4gICAgICAgIHJldHVybiBkYXRhLmpzb24oKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2l0eSBvciBjb25uZWN0aW9uIGVycm9yXCIpO1xuICAgIH0pXG4gICAgLnRoZW4oZnVuY3Rpb24gKGpzb25fZGF0YSkge1xuICAgICAgLy8gVE9ETyBEZXRhaWxlZCBmb3JlY2FzdCAtIGh1bWlkaXR5LCB3aW5kLXNwZWVkIChtL3MpLCBjbG91ZGluZXNzICglKSxcblxuICAgICAgY29uc3Qgd2VhdGhlcl9kYXRhX2FycmF5ID0gW107XG4gICAgICBjb25zb2xlLmxvZyhqc29uX2RhdGEpO1xuICAgICAgY29uc3QgY2l0eSA9IGpzb25fZGF0YS5jaXR5Lm5hbWU7XG4gICAgICBDSVRZX05BTUVfSFRNTC50ZXh0Q29udGVudCA9IGNpdHk7XG5cbiAgICAgIC8vIEdldHRpbmcgdGhlIHdlYXRoZXIgb2YgNSBkYXlzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGpzb25fZGF0YS5saXN0Lmxlbmd0aDsgaSArPSA4KSB7XG4gICAgICAgIC8vIGFkZGluZyB0aGUgbWFpbiBkYXRhXG4gICAgICAgIGNvbnN0IHdlYXRoZXJfZGF0YSA9IHt9O1xuICAgICAgICB3ZWF0aGVyX2RhdGEubWFpbiA9IHt9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGpzb25fZGF0YS5saXN0W2ldKTtcbiAgICAgICAgY29uc3QgZGF0ZV9hcnIgPSBqc29uX2RhdGEubGlzdFtpXS5kdF90eHRcbiAgICAgICAgICAuc2xpY2UoMCwgMTApXG4gICAgICAgICAgLnNwbGl0KFwiLVwiKTtcbiAgICAgICAgLy8gRGF0ZSBTdHJpbmdcbiAgICAgICAgY29uc3QgZGF0ZV9vYmogPSBuZXcgRGF0ZShcbiAgICAgICAgICBkYXRlX2FyclswXSxcbiAgICAgICAgICBkYXRlX2FyclsxXSAtIDEsXG4gICAgICAgICAgZGF0ZV9hcnJbMl1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGF0ZV9zdHIgPSBkYXRlX29iai50b0xvY2FsZVN0cmluZyhcImVuLXVzXCIsIHtcbiAgICAgICAgICBtb250aDogXCJzaG9ydFwiLFxuICAgICAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgICAgIGRheTogXCJudW1lcmljXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIFRPREFZX0hUTUwudGV4dENvbnRlbnQgPSBkYXRlX3N0cjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXlfc3RyID0gZ2V0X2RheV9uYW1lKGRhdGVfb2JqLmdldERheSgpKTtcbiAgICAgICAgd2VhdGhlcl9kYXRhLm1haW4uZGF0ZSA9IHtcbiAgICAgICAgICBEYXRlOiBkYXRlX3N0cixcbiAgICAgICAgICBkYXlfc3RyOiBkYXlfc3RyLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGRheV9zdHIpO1xuICAgICAgICAvLyBUZW1wZXJhdHVyZXNcbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmUgPSBNYXRoLnJvdW5kKGpzb25fZGF0YS5saXN0W2ldLm1haW4udGVtcCk7XG4gICAgICAgIHdlYXRoZXJfZGF0YS5tYWluLnRlbXBlcmF0dXJlID0gdGVtcGVyYXR1cmU7XG5cbiAgICAgICAgLy8gU2hvcnQgd2VhdGhlciBkZXNjcmlwdGlvblxuICAgICAgICBjb25zdCB3ZWF0aGVyX2Rlc2NyaXB0aW9uID1cbiAgICAgICAgICBqc29uX2RhdGEubGlzdFtpXS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uO1xuICAgICAgICB3ZWF0aGVyX2RhdGEubWFpbi5kZXNjcmlwdGlvbiA9IHdlYXRoZXJfZGVzY3JpcHRpb247XG4gICAgICAgIC8vIEdldHMgdGhlIGxvZ29zIG5hbWUgYW5kIFVSTCB0byB0aGUgbG9nbyAucG5nIGZpbGVcbiAgICAgICAgY29uc3QgbG9nb19uYW1lID0ganNvbl9kYXRhLmxpc3RbaV0ud2VhdGhlclswXS5pY29uICsgXCIucG5nXCI7XG4gICAgICAgIGNvbnN0IGxvZ29fdXJsID1cbiAgICAgICAgICBcIiBodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi9cIiArIGxvZ29fbmFtZTtcbiAgICAgICAgd2VhdGhlcl9kYXRhLm1haW4ubG9nbyA9IGxvZ29fdXJsO1xuXG4gICAgICAgIC8vIEFkZGluZyB0aGUgZGV0YWlscyBkYXRhXG5cbiAgICAgICAgd2VhdGhlcl9kYXRhLmRldGFpbHMgPSB7fTtcblxuICAgICAgICB3ZWF0aGVyX2RhdGEuZGV0YWlscy5jbG91ZHMgPSBqc29uX2RhdGEubGlzdFtpXS5jbG91ZHMuYWxsO1xuICAgICAgICB3ZWF0aGVyX2RhdGEuZGV0YWlscy5odW1pZGl0eSA9XG4gICAgICAgICAganNvbl9kYXRhLmxpc3RbaV0ubWFpbi5odW1pZGl0eTtcbiAgICAgICAgd2VhdGhlcl9kYXRhLmRldGFpbHMud2luZF9zcGVlZCA9XG4gICAgICAgICAganNvbl9kYXRhLmxpc3RbaV0ud2luZC5zcGVlZDtcblxuICAgICAgICB3ZWF0aGVyX2RhdGFfYXJyYXkucHVzaCh3ZWF0aGVyX2RhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdlYXRoZXJfZGF0YV9hcnJheTtcbiAgICB9KVxuICAgIC50aGVuKGZ1bmN0aW9uICh3ZWF0aGVyX2RhdGEpIHtcbiAgICAgIGNvbnNvbGUubG9nKHdlYXRoZXJfZGF0YSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHdlYXRoZXJfZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBmb3JlY2FzdF9kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBmb3JlY2FzdF9kaXYuY2xhc3NOYW1lID0gXCJmb3JlY2FzdFwiO1xuXG4gICAgICAgIGNvbnN0IG1haW5fZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgbWFpbl9kaXYuY2xhc3NOYW1lID0gXCJtYWluXCI7XG5cbiAgICAgICAgY29uc3QgZm9yZWNhc3RfZGF5X2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICAgICAgZm9yZWNhc3RfZGF5X2Rpdi5pZCA9IFwiZm9yZWNhc3QtZGF5XCI7XG4gICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgZm9yZWNhc3RfZGF5X2Rpdi50ZXh0Q29udGVudCA9IFwiVG9kYXlcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3JlY2FzdF9kYXlfZGl2LnRleHRDb250ZW50ID1cbiAgICAgICAgICAgIHdlYXRoZXJfZGF0YVtpXS5tYWluLmRhdGUuZGF5X3N0cjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZvcmVjYXN0X2ltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgZm9yZWNhc3RfaW1hZ2UuaWQgPSBcImZvcmVjYXN0LWltYWdlXCI7XG4gICAgICAgIGZvcmVjYXN0X2ltYWdlLnNyYyA9IHdlYXRoZXJfZGF0YVtpXS5tYWluLmxvZ287XG5cbiAgICAgICAgY29uc3QgdGVtcGVyYXR1cmVfZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgICB0ZW1wZXJhdHVyZV9kaXYuaWQgPSBcImZvcmVjYXN0LXRlbXBlcmF0dXJlXCI7XG4gICAgICAgIHRlbXBlcmF0dXJlX2Rpdi50ZXh0Q29udGVudCA9IGBUZW1wZXJhdHVyZTogJHt3ZWF0aGVyX2RhdGFbaV0ubWFpbi50ZW1wZXJhdHVyZX0gQ8KwYDtcblxuICAgICAgICBjb25zdCBkZXNjcmlwdGlvbl9kaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgZGVzY3JpcHRpb25fZGl2LmlkID0gXCJmb3JlY2FzdC1kZXNjcmlwdGlvblwiO1xuICAgICAgICBkZXNjcmlwdGlvbl9kaXYudGV4dENvbnRlbnQgPSBgRGVzY3JpcHRpb246ICR7d2VhdGhlcl9kYXRhW2ldLm1haW4uZGVzY3JpcHRpb259YDtcblxuICAgICAgICBjb25zdCBkZXRhaWxzX2RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGRldGFpbHNfZGl2LmNsYXNzTmFtZSA9IFwiZGV0YWlsc1wiO1xuXG4gICAgICAgIGNvbnN0IGZvcmVjYXN0X2RhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgZm9yZWNhc3RfZGF0ZS5pZCA9IFwiZm9yZWNhc3QtZGF0ZVwiO1xuICAgICAgICBmb3JlY2FzdF9kYXRlLnRleHRDb250ZW50ID0gYERhdGU6ICR7d2VhdGhlcl9kYXRhW2ldLm1haW4uZGF0ZS5EYXRlfWA7XG5cbiAgICAgICAgY29uc3QgaHVtaWRpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgaHVtaWRpdHkuaWQgPSBcImZvcmVjYXN0LWh1bWlkaXR5XCI7XG4gICAgICAgIGh1bWlkaXR5LnRleHRDb250ZW50ID0gYEh1bWlkaXR5OiAke3dlYXRoZXJfZGF0YVtpXS5kZXRhaWxzLmh1bWlkaXR5fSAlYDtcblxuICAgICAgICBjb25zdCB3aW5kX3NwZWVkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIHdpbmRfc3BlZWQuaWQgPSBcImZvcmVjYXN0LXdpbmRcIjtcbiAgICAgICAgd2luZF9zcGVlZC50ZXh0Q29udGVudCA9IGBXaW5kIHNwZWVkOiAke3dlYXRoZXJfZGF0YVtpXS5kZXRhaWxzLndpbmRfc3BlZWR9IG0vc2A7XG5cbiAgICAgICAgY29uc3QgY2xvdWRpbmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBjbG91ZGluZXNzLmlkID0gXCJjbG91ZGluZXNzXCI7XG4gICAgICAgIGNsb3VkaW5lc3MudGV4dENvbnRlbnQgPSBgQ2xvdWRpbmVzczogJHt3ZWF0aGVyX2RhdGFbaV0uZGV0YWlscy5jbG91ZHN9ICVgO1xuXG4gICAgICAgIG1haW5fZGl2LmFwcGVuZENoaWxkKGZvcmVjYXN0X2RheV9kaXYpO1xuICAgICAgICBtYWluX2Rpdi5hcHBlbmRDaGlsZChmb3JlY2FzdF9pbWFnZSk7XG4gICAgICAgIG1haW5fZGl2LmFwcGVuZENoaWxkKHRlbXBlcmF0dXJlX2Rpdik7XG4gICAgICAgIG1haW5fZGl2LmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uX2Rpdik7XG5cbiAgICAgICAgZGV0YWlsc19kaXYuYXBwZW5kQ2hpbGQoZm9yZWNhc3RfZGF0ZSk7XG4gICAgICAgIGRldGFpbHNfZGl2LmFwcGVuZENoaWxkKGh1bWlkaXR5KTtcbiAgICAgICAgZGV0YWlsc19kaXYuYXBwZW5kQ2hpbGQod2luZF9zcGVlZCk7XG4gICAgICAgIGRldGFpbHNfZGl2LmFwcGVuZENoaWxkKGNsb3VkaW5lc3MpO1xuXG4gICAgICAgIGZvcmVjYXN0X2Rpdi5hcHBlbmRDaGlsZChtYWluX2Rpdik7XG4gICAgICAgIGZvcmVjYXN0X2Rpdi5hcHBlbmRDaGlsZChkZXRhaWxzX2Rpdik7XG4gICAgICAgIFdFQVRIRVJfRk9SRUNBU1RfSFRNTC5hcHBlbmRDaGlsZChmb3JlY2FzdF9kaXYpO1xuICAgICAgfVxuICAgIH0pO1xufTtcbi8qXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcmVjYXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aDIgaWQ9XCJmb3JlY2FzdC1kYXlcIj5TdW5kYXk8L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJodHRwOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8wNGQucG5nXCIgaWQ9XCJmb3JlY2FzdC1pbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGlkPVwiZm9yZWNhc3QtdGVtcGVyYXR1cmVcIj5UZW1wZXJhdHVyZTogMzcgQ8KwPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkPVwiZm9yZWNhc3QtZGVzY3JpcHRpb25cIj5EZXNjcmlwdGlvbjogUmFpbnk8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiZm9yZWNhc3QtYnRuXCI+4oaTPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9XCJmb3JlY2FzdC1kYXRlXCI+RGF0ZTogSnVsIDIzLCAyMDIyPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9XCJmb3JlY2FzdC1odW1pZGl0eVwiPkh1bWlkaXR5OiA2MyUgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgaWQ9XCJ3aW5kLXNwZWVkXCI+V2luZCBTcGVlZDogMy40NW0vczwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGlkPVwiY2xvdWRpbmVzc1wiPkNsb3VkaW5lc3M6IDEyJTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4qL1xuXG5leHBvcnQgeyB0ZXN0X2FwaSwgZ2V0X2FwaV9rZXkgfTtcbiIsImZ1bmN0aW9uIGdldF9kYXlfbmFtZShpbmRleCkge1xuICBjb25zdCBkYXlzID0gW1xuICAgIFwiU3VuZGF5XCIsXG4gICAgXCJNb25kYXlcIixcbiAgICBcIlR1ZXNkYXlcIixcbiAgICBcIldlZG5lc2RheVwiLFxuICAgIFwiVGh1cnNkYXlcIixcbiAgICBcIkZyaWRheVwiLFxuICAgIFwiU2F0dXJkYXlcIixcbiAgXTtcbiAgcmV0dXJuIGRheXNbaW5kZXhdO1xufVxuXG5jb25zdCBnZXRfcmFuZG9tX2NpdHkgPSAoKSA9PiB7XG4gIGNvbnN0IGNpdGllcyA9IFtcbiAgICBcIk5ldyBZb3JrXCIsXG4gICAgXCJMb25kb25cIixcbiAgICBcIkJlcmxpblwiLFxuICAgIFwiQW1zdGVyZGFtXCIsXG4gICAgXCJNYXJyYWtlc2hcIixcbiAgICBcIlBhcmlzXCIsXG4gICAgXCJWZW5lemlhXCIsXG4gICAgXCJXYXJzYXdcIixcbiAgXTtcbiAgcmV0dXJuIGNpdGllc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaXRpZXMubGVuZ3RoKV07XG59O1xuXG5leHBvcnQgeyBnZXRfZGF5X25hbWUsIGdldF9yYW5kb21fY2l0eSB9O1xuIiwiaW1wb3J0IFwiLi4vY3NzL3N0eWxlLmNzc1wiO1xuaW1wb3J0IHsgZ2V0X2FwaV9rZXksIHRlc3RfYXBpIH0gZnJvbSBcIi4vQVBJX2Z1bmN0aW9uc1wiO1xuaW1wb3J0IHsgZ2V0X3JhbmRvbV9jaXR5IH0gZnJvbSBcIi4vT3RoZXJfZnVuY3Rpb25zXCI7XG5cbmNvbnN0IHNlYXJjaF9iYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaC10ZXh0XCIpO1xuY29uc3Qgc2VhcmNoX2Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaC1idG5cIik7XG5cbi8vIEFkZGluZyB0aGUgZXZlbnQgZm9yIGJvdGggQnV0dG9uIGFuZCBlbnRlciBwcmVzc1xuXG5zZWFyY2hfYmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCAoKSA9PiB7XG4gIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgIHRlc3RfYXBpKHNlYXJjaF9iYXIudmFsdWUsIGdldF9hcGlfa2V5KCkpO1xuICB9XG59KTtcblxuc2VhcmNoX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgdGVzdF9hcGkoc2VhcmNoX2Jhci52YWx1ZSwgZ2V0X2FwaV9rZXkoKSk7XG59KTtcblxudGVzdF9hcGkoZ2V0X3JhbmRvbV9jaXR5KCksIGdldF9hcGlfa2V5KCkpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImdldEVsZW1lbnRCeUlkIiwiQ0lUWV9OQU1FX0hUTUwiLCJUT0RBWV9IVE1MIiwiV0VBVEhFUl9GT1JFQ0FTVF9IVE1MIiwidGVzdF9hcGkiLCJjaXR5X25hbWUiLCJmZXRjaCIsInRoZW4iLCJvayIsImpzb24iLCJqc29uX2RhdGEiLCJ3ZWF0aGVyX2RhdGFfYXJyYXkiLCJjb25zb2xlIiwibG9nIiwiY2l0eSIsIm5hbWUiLCJ0ZXh0Q29udGVudCIsIndlYXRoZXJfZGF0YSIsImRhdGVfYXJyIiwiZHRfdHh0Iiwic2xpY2UiLCJzcGxpdCIsImRhdGVfb2JqIiwiRGF0ZSIsImRhdGVfc3RyIiwidG9Mb2NhbGVTdHJpbmciLCJtb250aCIsInllYXIiLCJkYXkiLCJkYXlfc3RyIiwiZ2V0RGF5IiwibWFpbiIsImRhdGUiLCJ0ZW1wZXJhdHVyZSIsIk1hdGgiLCJyb3VuZCIsInRlbXAiLCJ3ZWF0aGVyX2Rlc2NyaXB0aW9uIiwid2VhdGhlciIsImRlc2NyaXB0aW9uIiwibG9nb191cmwiLCJpY29uIiwibG9nbyIsImRldGFpbHMiLCJjbG91ZHMiLCJhbGwiLCJodW1pZGl0eSIsIndpbmRfc3BlZWQiLCJ3aW5kIiwic3BlZWQiLCJmb3JlY2FzdF9kaXYiLCJjbGFzc05hbWUiLCJtYWluX2RpdiIsImZvcmVjYXN0X2RheV9kaXYiLCJmb3JlY2FzdF9pbWFnZSIsInNyYyIsInRlbXBlcmF0dXJlX2RpdiIsImRlc2NyaXB0aW9uX2RpdiIsImRldGFpbHNfZGl2IiwiZm9yZWNhc3RfZGF0ZSIsImNsb3VkaW5lc3MiLCJzZWFyY2hfYmFyIiwic2VhcmNoX2Zvcm0iLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ2YWx1ZSIsImNpdGllcyIsImZsb29yIiwicmFuZG9tIiwiZ2V0X3JhbmRvbV9jaXR5Il0sInNvdXJjZVJvb3QiOiIifQ==