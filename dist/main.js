(()=>{"use strict";var n={402:(n,e,t)=>{t.d(e,{Z:()=>c});var i=t(537),a=t.n(i),o=t(645),r=t.n(o)()(a());r.push([n.id,"html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.navbar {\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #991B1B;\n    color: #FAFAFA;\n}\n\n.page-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#icon-img {\n    min-width: 48px;\n    max-width: 96px;\n    min-height: 48px;\n    max-height: 96px;\n}\n\n.nav-search {\n    display: flex;\n    align-items: center;\n}\n\n.nav-search input,\n.nav-search img {\n    height: 24px;\n}\n\n.nav-search input {\n    padding: 3px;\n}\n\n.nav-search button {\n    background-color: black;\n    border: none;\n        cursor: pointer;\n    padding: 3px;\n}\n\n.nav-search img {\n    width: 24px;\n}\n\n\n.content {\n    width: 100%;\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n}\n\n.title {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n}\n\n.title #city-name {\n    font-size: 2.1em;\n    font-weight: 900;\n}\n\n.title #today {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.weather-forecast {\n    display: flex;\n    flex: 1;\n    gap: 36px;\n    flex-wrap: wrap;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    min-width: 400px;\n    max-width: fit-content;\n    height: fit-content;\n    border: 5px solid red;\n}\n\n.main, .details {\n    padding: 6px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast .main {\n    border: 2px solid green;\n    font-size: 24px;\n    background-color: #F8FAFC;\n}\n\n.main button {\n    width: 100px;\n}\n\n.forecast .main img {\n    min-height: 100px;\n    min-width: 100px;\n    max-height: 150px;\n    max-width: 150px;\n}\n\n.forecast .details{\n    border:  1px solid grey;\n    font-size: 16px;\n    background-color: #D1D5DB;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;;AAEA;;IAEI,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,aAAa;IACb,yBAAyB;IACzB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,YAAY;QACR,eAAe;IACnB,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;;AAGA;IACI,WAAW;IACX,gBAAgB;IAChB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,iBAAiB;IACjB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,OAAO;IACP,SAAS;IACT,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,gBAAgB;IAChB,sBAAsB;IACtB,mBAAmB;IACnB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,yBAAyB;AAC7B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,yBAAyB;AAC7B",sourcesContent:["html {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n.navbar {\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px;\n    background-color: #991B1B;\n    color: #FAFAFA;\n}\n\n.page-icon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#icon-img {\n    min-width: 48px;\n    max-width: 96px;\n    min-height: 48px;\n    max-height: 96px;\n}\n\n.nav-search {\n    display: flex;\n    align-items: center;\n}\n\n.nav-search input,\n.nav-search img {\n    height: 24px;\n}\n\n.nav-search input {\n    padding: 3px;\n}\n\n.nav-search button {\n    background-color: black;\n    border: none;\n        cursor: pointer;\n    padding: 3px;\n}\n\n.nav-search img {\n    width: 24px;\n}\n\n\n.content {\n    width: 100%;\n    margin-top: 20px;\n    display: flex;\n    flex-direction: column;\n}\n\n.title {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    font-size: 2.2rem;\n    margin-bottom: 20px;\n}\n\n.title #city-name {\n    font-size: 2.1em;\n    font-weight: 900;\n}\n\n.title #today {\n    font-size: 1.2em;\n    font-weight: 600;\n}\n\n.weather-forecast {\n    display: flex;\n    flex: 1;\n    gap: 36px;\n    flex-wrap: wrap;\n}\n\n.forecast {\n    display: flex;\n    flex-direction: column;\n    min-width: 400px;\n    max-width: fit-content;\n    height: fit-content;\n    border: 5px solid red;\n}\n\n.main, .details {\n    padding: 6px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.forecast .main {\n    border: 2px solid green;\n    font-size: 24px;\n    background-color: #F8FAFC;\n}\n\n.main button {\n    width: 100px;\n}\n\n.forecast .main img {\n    min-height: 100px;\n    min-width: 100px;\n    max-height: 150px;\n    max-width: 150px;\n}\n\n.forecast .details{\n    border:  1px solid grey;\n    font-size: 16px;\n    background-color: #D1D5DB;\n}\n"],sourceRoot:""}]);const c=r},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var r={};if(i)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(r[s]=!0)}for(var A=0;A<n.length;A++){var d=[].concat(n[A]);i&&r[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(a," */"),r=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(r).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var o={},r=[],c=0;c<n.length;c++){var s=n[c],A=i.base?s[0]+i.base:s[0],d=o[A]||0,l="".concat(A," ").concat(d);o[A]=d+1;var p=t(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var u=a(m,i);i.byIndex=c,e.splice(c,0,{identifier:l,updater:u,references:1})}r.push(l)}return r}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=i(n=n||[],a=a||{});return function(n){n=n||[];for(var r=0;r<o.length;r++){var c=t(o[r]);e[c].references--}for(var s=i(n,a),A=0;A<o.length;A++){var d=t(o[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=s}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,a&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(i){var a=e[i];if(void 0!==a)return a.exports;var o=e[i]={id:i,exports:{}};return n[i](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),i=t(795),a=t.n(i),o=t(569),r=t.n(o),c=t(565),s=t.n(c),A=t(216),d=t.n(A),l=t(589),p=t.n(l),m=t(402),u={};u.styleTagTransform=p(),u.setAttributes=s(),u.insert=r().bind(null,"head"),u.domAPI=a(),u.insertStyleElement=d(),e()(m.Z,u),m.Z&&m.Z.locals&&m.Z.locals,document.getElementById("icon-test");const f=document.getElementById("city-name"),h=document.getElementById("today"),g=document.querySelector(".weather-forecast"),B=(n,e)=>{fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=${e}&units=metric`).then((function(n){if(n.ok)return n.json();throw new Error("Invalid city or connection error")})).then((function(n){const e=[];console.log(n);const t=n.city.name;f.textContent=t,function(n){for(;n.firstChild;)n.removeChild(n.firstChild)}(g);for(let t=0;t<n.list.length;t+=8){const i={main:{}};console.log(n.list[t]);const a=n.list[t].dt_txt.slice(0,10).split("-"),o=new Date(a[0],a[1]-1,a[2]),r=o.toLocaleString("en-us",{month:"short",year:"numeric",day:"numeric"});0===t&&(h.textContent=r);const c=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][o.getDay()];i.main.date={Date:r,day_str:c},console.log(c);const s=Math.round(n.list[t].main.temp);i.main.temperature=s;const A=n.list[t].weather[0].description;i.main.description=A;const d=" http://openweathermap.org/img/wn/"+n.list[t].weather[0].icon+".png";i.main.logo=d,i.details={},i.details.clouds=n.list[t].clouds.all,i.details.humidity=n.list[t].main.humidity,i.details.wind_speed=n.list[t].wind.speed,e.push(i)}return e})).then((function(n){console.log(n);for(let e=0;e<n.length;e++){const t=document.createElement("div");t.className="forecast";const i=document.createElement("div");i.className="main";const a=document.createElement("h2");a.id="forecast-day",a.textContent=0===e?"Today":n[e].main.date.day_str;const o=document.createElement("img");o.id="forecast-image",o.src=n[e].main.logo;const r=document.createElement("h3");r.id="forecast-temperature",r.textContent=`Temperature: ${n[e].main.temperature} C°`;const c=document.createElement("p");c.id="forecast-description",c.textContent=`Description: ${n[e].main.description}`;const s=document.createElement("div");s.className="details";const A=document.createElement("p");A.id="forecast-date",A.textContent=`Date: ${n[e].main.date.Date}`;const d=document.createElement("p");d.id="forecast-humidity",d.textContent=`Humidity: ${n[e].details.humidity} %`;const l=document.createElement("p");l.id="forecast-wind",l.textContent=`Wind speed: ${n[e].details.wind_speed} m/s`;const p=document.createElement("p");p.id="cloudiness",p.textContent=`Cloudiness: ${n[e].details.clouds} %`,i.appendChild(a),i.appendChild(o),i.appendChild(r),i.appendChild(c),s.appendChild(A),s.appendChild(d),s.appendChild(l),s.appendChild(p),t.appendChild(i),t.appendChild(s),g.appendChild(t)}}))},C=document.getElementById("search-text"),x=document.getElementById("search-btn");C.addEventListener("keypress",(()=>{"Enter"===event.key&&B(C.value,"58870e7945eeb6b9b2d5e086112bce8c")})),x.addEventListener("click",(()=>{B(C.value,"58870e7945eeb6b9b2d5e086112bce8c")})),B((()=>{const n=["New York","London","Berlin","Amsterdam","Marrakesh","Paris","Venezia","Warsaw"];return n[Math.floor(Math.random()*n.length)]})(),"58870e7945eeb6b9b2d5e086112bce8c")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,